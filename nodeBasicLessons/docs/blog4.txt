We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.

We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.

We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.
We are the largest community of tech enthusiasts in emerging markets. We bring together thousands of entrepreneurs, influencers and decision makers together every year via our global network of tech summit programs around the world. 

In this tutorial we are going to build a blog powered by Node.js on the back end, Bootstrap on the front end, and MongoDB as the data store. We are going to start from scratch and build out the project one step at a time. We’ll see how to include all the packages we’ll need into Node for building the blog. Some of these include Express, Bcrypt, nodemon, express-edge, mongoose, body-parser, express-fileupload, and express-session. We’ll start with basic routes in the index.js file, and then gradually move the application into a Model View Controller architecture. Let’s get started


Building A Home Page
To get started building the home page, we can create a pages directory to store static files in. Within that directory we can start with an index.html file.

What happens here ? The express() function is exported from the express module using the require() function and referenced to the variable express. The express() function is basically the main function within the Express Framework and documented in detail in the API reference. The express() function generates an Application Object which is stored in the variable app. The Application Object is also well documented in the API reference and has methods that can be attached to this object such as methods for Routing HTTP requests and configure Middleware. We will see some hands on lines of code to understand Routing and Middleware in this article.

This is a built-in middleware function in Express. It parses incoming requests with JSON payloads and is based on body-parser.

Returns middleware that only parses JSON and only looks at requests where the Content-Type header matches the type option. This parser accepts any Unicode encoding of the body and supports automatic inflation of gzip and deflate encodings.

A new body object containing the parsed data is populated on the request object after the middleware (i.e. req.body), or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.